import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "java-library" // Solar
    id "maven-publish"
    id "org.cadixdev.licenser" version "0.6.0"
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "pl.allegro.tech.build.axion-release" version "1.13.3" // Solar
}

// Solar start
scmVersion.tag.prefix = ""

group "gg.solarmc.placeholder"
project.version = scmVersion.version

repositories {
    mavenCentral()
    maven({ url = "https://repo.solarmc.gg/mvn" })
// Solar end
}

dependencies {
/* Solar start
    implementation "org.bstats:bstats-bukkit:2.2.1"

    implementation "net.kyori:adventure-platform-bukkit:4.0.0-SNAPSHOT"
*/
    compileOnly "gg.solarmc.paper:solarpaper-api:1.2.0"
    compileOnly "org.jetbrains:annotations:21.0.1"
// Solar end

    testImplementation "org.openjdk.jmh:jmh-core:1.23"
    testImplementation "org.openjdk.jmh:jmh-generator-annprocess:1.23"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"
}

processResources {
    filter ReplaceTokens, tokens: [name: rootProject.name, version: project.version, description: "PAPI is full of static state"] // Solar
}

java {
// Solar start
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
// Solar end

    withJavadocJar()
    withSourcesJar()
}

// Solar start
compileJava {
    options.javaModuleVersion = provider { project.version }
}
// Solar end

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

/* Solar start
shadowJar {
    archiveClassifier.set("")

    relocate "org.bstats", "me.clip.placeholderapi.metrics"
    relocate "net.kyori", "me.clip.placeholderapi.libs.kyori"
}
*/ // Solar end

license {
    ignoreFailures = true // Solar
    include '**/*.java'

    matching('**/*.java') {
        header = file('config/headers/main.txt')
    }

    ext {
        year = 2021
    }
}

test {
    useJUnitPlatform()
}

configurations {
    testImplementation {
        extendsFrom(compileOnly)
    }
}

publishing {
    repositories {
        maven {
// Solar start
            name = "solar-repo"
            url = "https://maven.cloudsmith.io/solarmc/oss-affero-gpl3"

            credentials {
                username = System.getenv("REPO_USER")
                password = System.getenv("REPO_PASS")
            }
// Solar end
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = "placeholderapi"

            from components.java

/* Solar start - remove
            pom.withXml {

                // some are having issues with bstats so we might need to add that to the pom as well

                asNode().appendNode("packaging", "jar")
                asNode().remove(asNode().get("dependencies"))

                def dependenciesNode = asNode().appendNode("dependencies")
                // jetbrains annotations
                def jetbrainsAnnotations = dependenciesNode.appendNode("dependency")
                jetbrainsAnnotations.appendNode("groupId", "org.jetbrains")
                jetbrainsAnnotations.appendNode("artifactId", "annotations")
                jetbrainsAnnotations.appendNode("version", "19.0.0")
            }
*/ // Solar end
        }
    }
}

publish.dependsOn build
